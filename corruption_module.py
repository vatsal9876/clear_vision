# -*- coding: utf-8 -*-
"""corrpution_module.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/vatsal9876/image_restoration/blob/main/corrpution_module.ipynb
"""

import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import random

def apply_random_mask_pil(img, mask_ratio=0.3):
    # img here is numpy array with float [0,1]
    img_pil = Image.fromarray((img * 255).astype(np.uint8))
    w, h = img_pil.size
    mask_w, mask_h = int(w * mask_ratio), int(h * mask_ratio)
    left = random.randint(0, w - mask_w)
    top = random.randint(0, h - mask_h)
    mask = Image.new('RGB', (w, h), (255, 255, 255))
    mask_draw = Image.new('RGB', (mask_w, mask_h), (0, 0, 0))
    img_pil.paste(mask_draw, (left, top))
    return np.array(img_pil).astype(np.float32) / 255.0

def add_gaussian_noise_cv(img, mean=0, std=0.1):
    noise = np.random.normal(mean, std, img.shape).astype(np.float32)
    noisy = img + noise
    noisy = np.clip(noisy, 0, 1)
    return noisy

def blur_image_cv(img, ksize=5):
    ksize = (ksize, ksize)
    blurred = cv2.blur(img, ksize)
    return blurred

def corrupt_image(img):
    corrupted = img
    if random.random() < 0.7:
        corrupted = add_gaussian_noise_cv(corrupted)
    if random.random() < 0.8:
        corrupted = blur_image_cv(corrupted)
    if random.random() < 0.5:
        corrupted = apply_random_mask_pil(corrupted)
    return corrupted
