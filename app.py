# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1REi65cGiMcvasdEQmfhxpu-Yw8J4oMca
"""



import streamlit as st
import numpy as np
from PIL import Image

from vae_model import load_vae_model
from corruption_module import corrupt_image
from utils import compute_psnr, compute_ssim

import os
import gdown

def download_weights():
    url = "https://drive.google.com/uc?id=11vI2DHWnLvgU0xSNWxZdz42b2HwDE2B9"
    output = "weights/model.h5"  # Adjust path/filename as needed
    os.makedirs(os.path.dirname(output), exist_ok=True)
    if not os.path.exists(output):
        gdown.download(url, output, quiet=False)
    return output

# Example usage in your model loader:
weights_path = download_weights()
# model = load_vae_model(weights_path)

@st.cache_resource
def get_model():
    return load_vae_model(weights_path)

st.title("Image Restoration with VAE")

uploaded_file = st.file_uploader("Upload an image", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Original Image", use_column_width=True)

    corrupted = corrupt_image(np.array(image))
    st.image(corrupted, caption="Corrupted Image", use_column_width=True)

    vae = get_model()
    restored = vae.restore(corrupted)  # Replace with your actual restoration method
    st.image(restored, caption="Restored Image", use_column_width=True)

    psnr = compute_psnr(np.array(image), restored)
    ssim = compute_ssim(np.array(image), restored)
    lpips = compute_lpips(np.array(image), restored)
    st.write(f"**PSNR:** {psnr:.2f}")
    st.write(f"**SSIM:** {ssim:.4f}")
    st.write(f"**LPIPS:** {lpips:.4f}")

    st.download_button(
        label="Download Restored Image",
        data=Image.fromarray(restored).tobytes(),
        file_name="restored.png",
        mime="image/png"
    )
else:
    st.info("Please upload an image to begin.")
